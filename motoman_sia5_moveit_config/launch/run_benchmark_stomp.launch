<launch>

  <!-- This argument must specify the list of .cfg files to process for benchmarking -->
  <arg name="cfg" default="$(find motoman_sia5_moveit_config)/config/benchmark_config.cfg"/>
  <arg name="load_robot_description" value="true"/>
  <arg name="urdf_model" value="$(find motoman_description)/robots/sia5/sia5.urdf.xacro"/>
  <arg name="srdf_model" value="$(find motoman_moveit)/config/sia5/sia5.srdf"/>
  <arg name="joint_limits_config" value="$(find motoman_moveit)/config/sia5/joint_limits.yaml"/>
  <arg name="kinematics_config" value="$(find motoman_moveit)/config/sia5/kinematics.yaml"/>
  <arg name="controllers_config" value="$(find motoman_moveit)/config/sia5/controllers.yaml"/>
  <arg name="use_depth_sensor" value="false"/>
  <arg name="rviz_config" value="$(find motoman_moveit)/launch/rviz/moveit_sia5.rviz"/>
  <!-- Load URDF -->
  <include file="$(find motoman_sia5_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
    <arg name="urdf_model" value="$(arg urdf_model)"/>
    <arg name="srdf_model" value="$(arg srdf_model)"/>
    <arg name="joint_limits_config" value="$(arg joint_limits_config)"/>
    <arg name="kinematics_config" value="$(arg kinematics_config)"/>
  </include>

  <!-- Start the database -->
  <include file="$(find motoman_sia5_moveit_config)/launch/warehouse.launch">
    <!-- <arg name="moveit_warehouse_database_path" value="~/moveit_db"/> -->
  </include>

  <!-- Start Benchmark Executable -->
  <node name="$(anon moveit_benchmark)" pkg="moveit_ros_benchmarks" type="moveit_run_benchmark" args="$(arg cfg) --benchmark-planners" respawn="false" output="screen">
    <rosparam command="load" file="$(find motoman_sia5_moveit_config)/config/kinematics.yaml"/>
    <rosparam command="load" file="$(find motoman_sia5_moveit_config)/config/stomp_planning.yaml"/>
  </node>

  <node name="move_group" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen">
    <!-- Set the display variable, in case OpenGL code is used internally -->
<!--     <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="true"/>
    <param name="max_safe_path_cost" value="1"/>
    <param name="jiggle_fraction" value="0.05" /> -->
    <param name="collision_detector" value="IndustrialFCL" />

    <!-- MoveGroup capabilities to load -->
<!--     <param name="capabilities"
       value="move_group/MoveGroupCartesianPathService
              move_group/MoveGroupExecuteService
              move_group/MoveGroupKinematicsService
              move_group/MoveGroupMoveAction
              move_group/MoveGroupPickPlaceAction
              move_group/MoveGroupPlanService
              move_group/MoveGroupQueryPlannersService
              move_group/MoveGroupStateValidationService
              move_group/MoveGroupGetPlanningSceneService
              move_group/ClearOctomapService
              " />
 -->
    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
<!--     <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" /> -->
  </node>


</launch>
